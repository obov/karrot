// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model User {
    id              Int         @id @default(autoincrement())
    phone           String?     @unique
    email           String?     @unique
    name            String
    avatar          String?
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    tokens          Token[]
    Products        Product[]
    posts           Post[]
    answers         Answer[]
    wonderings      Wondering[]
    reviewsWrote    Review[]    @relation(name: "reviewsWrote")
    reviewsListened Review[]    @relation(name: "reviewsListened")
    favorites       Favorite[]
    records         Record[]
    streams         Stream[]
    messages        Message[]
}

model Token {
    id        Int      @id @default(autoincrement())
    payload   String   @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id          Int        @id @default(autoincrement())
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      Int
    image       String
    name        String
    price       Int
    description String     @db.MediumText
    favorites   Favorite[]
    records     Record[]
}

model Favorite {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    Int
    productId Int
}

model Record {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    Int
    productId Int
    kind      Kind
}

enum Kind {
    Sale
    Bought
}

model Post {
    id         Int         @id @default(autoincrement())
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    user       User        @relation(fields: [userId], references: [id], onDelete: SetNull)
    userId     Int
    question   String      @db.MediumText
    latitude   Float?
    longitude  Float?
    answers    Answer[]
    wonderings Wondering[]
}

model Answer {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: SetNull)
    userId    Int
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    Int
    answer    String   @db.MediumText
}

model Wondering {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: SetNull)
    userId    Int
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    Int

}

model Review {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    review     String   @db.MediumText
    writer     User     @relation(name: "reviewsWrote", fields: [writerId], references: [id], onDelete: SetNull)
    listener   User     @relation(name: "reviewsListened", fields: [listenerId], references: [id], onDelete: SetNull)
    writerId   Int
    listenerId Int
    score      Int      @default(1)
}

model Stream {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    name        String
    description String    @db.MediumText
    price       Int
    user        User      @relation(fields: [userId], references: [id], onDelete: SetNull)
    userId      Int
    messages    Message[]
}

model Message {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: SetNull)
    userId    Int
    message   String   @db.MediumText
    stream    Stream   @relation(fields: [streamId], references: [id])
    streamId  Int
}
